import java.util.Iterator;
import java.util.NoSuchElementException;

public class Deque < Item> implements Iterable<Item>{
    private int head, tail, size, capacity;
    private Item[] items;
    public Deque(){
        this.head = 0;
        this.tail = 0;
        size = 0;
        capacity = 1;
        items = (Item[]) new Object[capacity];
    }

    public boolean isEmpty(){
        if (this.size == 0){
            return true;
        }
        return false;
    }

    public int size(){
        return this.size;
    }

    private void checkAdd(Item item){
        if (item == null){
            throw new NullPointerException();
        }
    }

    private void checkRemove(){
        if (this.size == 0){
            throw new NoSuchElementException();
        }

    }

    private int getMod(int i){
        if (i == 0){
            return capacity-1;
        }
        else {
            return (i - 1) % capacity;
        }
    }

    private boolean emptyAdd(Item item) {
        if (this.size == 0){
            this.head = 0;
            this.tail = 0;
            this.items[0] = item;
            this.size += 1;
            return true;
        }
        return false;
    }

    public void addLast(Item item){
        checkAdd(item);
        if (!emptyAdd(item)){
        	this.tail = (this.tail + 1) % (this.capacity);
        	this.items[this.tail] = item;
        }
        this.size += 1;
        resize();
    }

    public void addFirst(Item item){
        checkAdd(item);
        if (!emptyAdd(item)){
        	this.head = getMod(this.head);
        	this.items[this.head] = item;
        }
        this.size += 1;
        resize();
    }

    public Item removeFirst(){
        checkRemove();
        Item a;
        a = this.items[this.head];
        this.head = (this.head + 1) % (this.capacity);
        this.size -= 1;
        resize();
        System.out.println("removed "+ a);
        return a;
    }

    public Item removeLast(){
        checkRemove();
        Item a;
        a = this.items[this.tail];
        this.tail = getMod(this.tail);
        this.size -= 1;
        resize();
        // System.out.println("removed "+ a);
        return a;
    }

    public Iterator < Item> iterator(){
        Iterator < Item> it = new Iterator<Item>(){
            private int index=head;

            public boolean hasNext(){
                return index>= head && index <=tail;
            }

            public Item next(){
                if (!this.hasNext()){
                    throw new NoSuchElementException();
                }
                return items[(index+1)%(capacity)];
            }

            public void remove(){
                throw new UnsupportedOperationException();
            }
        };

        return it;
    }

    private void disp(){
    	System.out.println("Displaying");
        int i = this.head;
        if (this.head == this.tail){
        	System.out.println("At ith " + this.head + " val is "+this.items[this.head]);
        }
        while (i < this.tail){
        	System.out.println("At ith " + i + " val is "+this.items[i]);
        	i = (i+1)%(this.capacity);
        }
    }

    private void resize(){
    	System.out.println("in resize cap, size "+this.capacity+" "+this.size);
        if (this.size ==0 || this.capacity == 0){
            return;
        }
        Item[] temp;
        if (this.size == this.capacity){
        	this.capacity = 2 * this.capacity;
        }else if(this.size  <= this.capacity/4){
            this.capacity = this.capacity / 4;
        }
        else{
            return;
        }
        temp = (Item[]) new Object[this.capacity];
        int i = this.head, j = 0;
        System.out.println("line 161 head, tail "+this.head + " " + this.tail);
        while (i <= this.tail ){
        	System.out.println("i is "+i+"val is "+this.items[i]);
        	temp[j] = this.items[i];
        	i = (i + 1) % (this.capacity);
        	j += 1;
        }
        this.head = 0;
        this.tail = size-1;
        this.items = temp;
    }

    public static void main(String[] args){
        Deque<Integer> deque = new Deque<Integer>();
        // deque.removeFirst();
//        for(int i=0;i<=10; i++){
//        	deque.addFirst(i);
//        	deque.disp();
//        }
        deque.addFirst(0);
        deque.removeFirst();
        deque.addFirst(2);
        deque.addFirst(3);
        deque.addFirst(4);
        deque.removeFirst();
        deque.addFirst(6);
        deque.addFirst(7);
        deque.removeFirst();
    }

}
